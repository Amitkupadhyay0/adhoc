from collections import defaultdict
import pandas as pd

# your starting counter
counter = max(int(df_pl["unique_number_combined"].max()), 1, max_value)

# full list of rule-based columns
keys = [
    'Unique_DEA', 'Unique_DMN', 'Unique_DMA', 'Unique_DEN',
    'Unique_DEM', 'Unique_DNA', 'DNM_MISS', 'DNE_MISS',
    'DAM_MISS', 'DAN_MISS', 'DAE_MISS'
]

conflicts = []
updates = {}

# union-find setup
parent = {}
def find(i):
    parent.setdefault(i, i)
    if parent[i] != i:
        parent[i] = find(parent[i])
    return parent[i]

def union(i, j):
    ri, rj = find(i), find(j)
    if ri != rj:
        parent[rj] = ri

# process per-DOB group
for dob, grp in df.groupby("DOB_X"):
    idxs = grp.index.tolist()

    # build inverted index: value â†’ list of indices
    val_map = defaultdict(list)
    for k in keys:
        for i, v in grp[k].items():
            if pd.notna(v):
                val_map[v].append(i)

    # union all rows sharing any value
    for lst in val_map.values():
        first = lst[0]
        for other in lst[1:]:
            union(first, other)

    # collect each connected component
    comps = defaultdict(list)
    for i in idxs:
        comps[find(i)].append(i)

    # assign clusters per component
    for comp in comps.values():
        # find any existing cluster IDs in this comp
        old_cids = {
            df.at[i, "unique_number_combined"]
            for i in comp
            if df.at[i, "unique_number_combined"] != -1
        }

        if old_cids:
            assigned = min(old_cids)
            if len(old_cids) > 1:
                conflicts.append({
                    "ROOT_POLICY_NUMBER": df.at[comp[0], "CUST_ID"],
                    "matched_indices": comp,
                    "matched_clusters": sorted(old_cids),
                    "assigned_cluster_id": assigned
                })
        else:
            assigned = counter
            counter += 1

        # apply to new rows only
        for i in comp:
            if df.at[i, "unique_number_combined"] == -1:
                updates[i] = assigned

# write back updates
for i, cid in updates.items():
    df.at[i, "unique_number_combined"] = cid

# conflicts DataFrame
df_conflict = pd.DataFrame(conflicts)
