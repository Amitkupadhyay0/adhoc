import pandas as pd
from tqdm import tqdm

list_col = ['Unique_DEA', 'Unique_DMN', 'Unique_DMA','Unique_DEN', 'Unique_DEM', 'Unique_DNA', 
            'DNM_MISS', 'DNE_MISS','DAM_MISS', 'DAN_MISS', 'DAE_MISS']

# Step 1: Init
cluster_counter = df1['CLUSTER_ID'].max() + 1 if df1['CLUSTER_ID'].max() >= 0 else 1
value_to_indices = {}  # value → set(index)
index_to_cluster = dict(df1[df1['CLUSTER_ID'] != -1][['CLUSTER_ID']].to_dict()['CLUSTER_ID'])

# Step 2: Build value → index mapping for all rows (including new)
for idx, row in df1.iterrows():
    for col in list_col:
        val = row[col]
        if pd.notna(val):
            if val not in value_to_indices:
                value_to_indices[val] = set()
            value_to_indices[val].add(idx)

# Step 3: Process new data
df_multiple_records = []

for idx, row in tqdm(df1[df1['CLUSTER_ID'] == -1].iterrows(), total=(df1['CLUSTER_ID'] == -1).sum()):
    similar_indices = set()
    
    for col in list_col:
        val = row[col]
        if pd.notna(val) and val in value_to_indices:
            similar_indices.update(value_to_indices[val])
    
    # Get matched cluster IDs from similar indices
    matched_clusters = {index_to_cluster[i] for i in similar_indices if i in index_to_cluster}
    
    if not matched_clusters:
        # Case: new → no match
        assigned_cluster = cluster_counter
        cluster_counter += 1
    else:
        # Case: new matches existing or other new
        assigned_cluster = min(matched_clusters)
        
        # If multiple old clusters, log conflict
        if len(matched_clusters) > 1:
            df_multiple_records.append({
                'ROOT_POLICY_NUMBER': row['CUST_ID'],  # change if needed
                'matched_index': idx,
                'matched_clusters': list(sorted(matched_clusters)),
                'assigned_cluster_id': assigned_cluster
            })
        
        # Transitive merge — update cluster of all similar new (if not yet assigned)
        for i in similar_indices:
            if i not in index_to_cluster:
                index_to_cluster[i] = assigned_cluster

    # Assign this row
    index_to_cluster[idx] = assigned_cluster

# Step 4: Final cluster ID assignment
df1.loc[list(index_to_cluster.keys()), 'CLUSTER_ID'] = list(index_to_cluster.values())

# Step 5: Build df_multiple
df_multiple = pd.DataFrame(df_multiple_records)
