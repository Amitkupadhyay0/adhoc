from collections import defaultdict

# assume df has columns:
#   DOB_X, unique_number_combined  (old clusters ≠ -1, new = -1)
#   plus the Unique_DE* / Unique_DG* columns

# your starting point
counter = max(int(df_pl["unique_number_combined"].max()), 1, max_value)

# list of your keys
keys = ["Unique_DEA","Unique_DEM","Unique_DMA","Unique_DGM","Unique_DGN","Unique_DGA","Unique_DGE"]

# prepare storage
conflicts = []
updates = {}   # idx → assigned cluster

# disjoint-set (union-find)
parent = {}
def find(i):
    parent.setdefault(i, i)
    if parent[i] != i:
        parent[i] = find(parent[i])
    return parent[i]

def union(i, j):
    ri, rj = find(i), find(j)
    if ri != rj:
        parent[rj] = ri

# process per-DOB
for dob, grp in df.groupby("DOB_X"):
    idxs = grp.index.tolist()
    # build inverted index value → [idx, …] within this DOB
    val_map = defaultdict(list)
    for k in keys:
        for i, v in grp[k].items():
            if pd.notna(v):
                val_map[v].append(i)
    # union all rows that share a value
    for lst in val_map.values():
        first = lst[0]
        for other in lst[1:]:
            union(first, other)

    # collect components
    comps = defaultdict(list)
    for i in idxs:
        comps[find(i)].append(i)

    # for each component, decide its cluster
    for comp in comps.values():
        # which old clusters live here?
        old_cids = { df.at[i, "unique_number_combined"]
                     for i in comp
                     if df.at[i, "unique_number_combined"] != -1 }

        if old_cids:
            assigned = min(old_cids)
            if len(old_cids) > 1:
                # log conflict once per component
                conflicts.append({
                    "ROOT_POLICY_NUMBER": df.at[comp[0], "CUST_ID"],
                    "matched_indices": comp,
                    "matched_clusters": sorted(old_cids),
                    "assigned_cluster_id": assigned
                })
        else:
            # brand-new component
            assigned = counter
            counter += 1

        # apply only to the new rows in this comp
        for i in comp:
            if df.at[i, "unique_number_combined"] == -1:
                updates[i] = assigned

# now push your updates back into df
for i, cid in updates.items():
    df.at[i, "unique_number_combined"] = cid

# turn conflict log into a DataFrame
df_conflict = pd.DataFrame(conflicts)
