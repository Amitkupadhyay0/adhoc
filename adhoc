from collections import defaultdict

list_col = ['Unique_DEA', 'Unique_DMN', 'Unique_DMA','Unique_DEN', 'Unique_DEM', 'Unique_DNA',
            'DNM_MISS', 'DNE_MISS','DAM_MISS', 'DAN_MISS', 'DAE_MISS']

df1 = df1.reset_index(drop=True)

# Split into old and new
df_old = df1[df1['CLUSTER_ID'] != -1]
df_new = df1[df1['CLUSTER_ID'] == -1]

# Dict: old_idx → cluster
old_idx_to_cluster = df_old['CLUSTER_ID'].to_dict()
max_cluster_id = df_old['CLUSTER_ID'].max()
new_idx_to_cluster = {}

conflict_records = []

# Group both old and new by DOB
old_groups = df_old.groupby('DOB')
new_groups = df_new.groupby('DOB')

cluster_counter = max_cluster_id + 1

for dob, df_new_group in new_groups:
    if dob not in old_groups.groups:
        # All new rows for this DOB → new clusters
        for idx in df_new_group.index:
            new_idx_to_cluster[idx] = cluster_counter
            cluster_counter += 1
        continue

    df_old_group = old_groups.get_group(dob)

    # Step 1: Build val → old idx (only within this DOB)
    val_to_old_idx = defaultdict(set)
    for col in list_col:
        for idx, val in df_old_group[col].items():
            if pd.notna(val):
                val_to_old_idx[val].add(idx)

    # Step 2: For each new row in this DOB group
    for idx, row in df_new_group.iterrows():
        matched_clusters = set()
        for col in list_col:
            val = row[col]
            if pd.notna(val):
                matched_clusters.update(old_idx_to_cluster.get(i) for i in val_to_old_idx.get(val, []) if i in old_idx_to_cluster)

        matched_clusters.discard(None)

        if matched_clusters:
            assigned_cluster = min(matched_clusters)
            new_idx_to_cluster[idx] = assigned_cluster

            if len(matched_clusters) > 1:
                conflict_records.append({
                    'ROOT_POLICY_NUMBER': row['CUST_ID'],
                    'matched_index': idx,
                    'matched_clusters': sorted(list(matched_clusters)),
                    'assigned_cluster_id': assigned_cluster
                })
        else:
            new_idx_to_cluster[idx] = cluster_counter
            cluster_counter += 1

# Step 3: Update df1
for idx, cid in new_idx_to_cluster.items():
    df1.at[idx, 'CLUSTER_ID'] = cid

df_conflict = pd.DataFrame(conflict_records)
