import pandas as pd
from collections import defaultdict

# INPUT: df1 has both old and new data
# Old data already has valid CLUSTER_ID; new data has CLUSTER_ID = -1

list_col = ['Unique_DEA', 'Unique_DMN', 'Unique_DMA', 'Unique_DEN', 'Unique_DEM', 'Unique_DNA',
            'DNM_MISS', 'DNE_MISS', 'DAM_MISS', 'DAN_MISS', 'DAE_MISS']

df1 = df1.reset_index(drop=True)

# Step 1: Build a union-find (disjoint set)
parent = {}

def find(x):
    while parent.get(x, x) != x:
        parent[x] = parent.get(parent[x], parent[x])
        x = parent[x]
    return x

def union(x, y):
    root_x = find(x)
    root_y = find(y)
    if root_x != root_y:
        parent[root_y] = root_x

# Step 2: Build value â†’ row mapping
value_map = defaultdict(list)
for col in list_col:
    for idx, val in df1[col].items():
        if pd.notna(val):
            value_map[val].append(idx)

# Step 3: Union all rows sharing a common value
for val, idx_list in value_map.items():
    for i in range(1, len(idx_list)):
        union(idx_list[0], idx_list[i])

# Step 4: Build groupings
groups = defaultdict(list)
for idx in df1.index:
    groups[find(idx)].append(idx)

# Step 5: Assign cluster IDs
existing_clusters = df1[df1['CLUSTER_ID'] != -1].set_index(df1[df1['CLUSTER_ID'] != -1].index)['CLUSTER_ID'].to_dict()
max_cluster = max(existing_clusters.values()) if existing_clusters else 0
new_cluster = max_cluster + 1

idx_to_cluster = {}  # final output

conflict_records = []

for group_indices in groups.values():
    existing_ids = set(idx for idx in group_indices if df1.at[idx, 'CLUSTER_ID'] != -1)
    existing_cluster_ids = {df1.at[idx, 'CLUSTER_ID'] for idx in existing_ids}

    if existing_cluster_ids:
        assigned_cluster = min(existing_cluster_ids)
    else:
        assigned_cluster = new_cluster
        new_cluster += 1

    for idx in group_indices:
        if df1.at[idx, 'CLUSTER_ID'] == -1:
            idx_to_cluster[idx] = assigned_cluster

    # If conflicting (multiple old cluster IDs), log conflict
    if len(existing_cluster_ids) > 1:
        root_idx = group_indices[0]
        conflict_records.append({
            'ROOT_POLICY_NUMBER': df1.at[root_idx, 'CUST_ID'],
            'matched_index': root_idx,
            'matched_clusters': sorted(list(existing_cluster_ids)),
            'assigned_cluster_id': assigned_cluster
        })

# Step 6: Update cluster IDs in df1
for idx, cluster in idx_to_cluster.items():
    df1.at[idx, 'CLUSTER_ID'] = cluster

# Output: conflict log
df_conflict = pd.DataFrame(conflict_records)
