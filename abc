import pandas as pd
import networkx as nx
import torch
from torch_geometric.utils import from_networkx
from torch_geometric.nn import GCNConv
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import torch.nn.functional as F

# Sample data
data = pd.DataFrame({
    'cluster_id': ['CL001', 'CL002', 'CL003', 'CL004'],
    'mobile': ['9876543210', '9876543210', '1112223333', '1112223333'],
    'email': ['abc@mail.com', 'xyz@mail.com', 'abc@mail.com', 'other@mail.com'],
    'address': ['123 st', '456 rd', '789 ave', '789 ave'],
    'fraudcat': [1, 0, None, None]
})

# Create graph
G = nx.Graph()

# Add nodes with label
for _, row in data.iterrows():
    G.add_node(row['cluster_id'], fraudcat=row['fraudcat'])

# Create edges based on shared mobile/email/address
for col in ['mobile', 'email', 'address']:
    groups = data.groupby(col)['cluster_id'].apply(list)
    for group in groups:
        for i in range(len(group)):
            for j in range(i + 1, len(group)):
                G.add_edge(group[i], group[j])

# Convert to PyTorch Geometric graph
g_data = from_networkx(G)

# Encode node labels (fraudcat)
labels_raw = nx.get_node_attributes(G, 'fraudcat')
node_idx_map = {k: i for i, k in enumerate(G.nodes())}
num_nodes = len(node_idx_map)

y = torch.full((num_nodes,), -1, dtype=torch.long)
for node, label in labels_raw.items():
    if pd.notnull(label):
        y[node_idx_map[node]] = int(label)

# Create feature matrix (for simplicity, just identity matrix)
x = torch.eye(num_nodes)

# Train/test mask
known_nodes = (y >= 0).nonzero(as_tuple=True)[0]
train_idx, test_idx = train_test_split(known_nodes.tolist(), test_size=0.5, random_state=42)

train_mask = torch.zeros(num_nodes, dtype=torch.bool)
test_mask = torch.zeros(num_nodes, dtype=torch.bool)
train_mask[train_idx] = True
test_mask[test_idx] = True

# Final graph data
g_data.x = x
g_data.y = y
g_data.train_mask = train_mask
g_data.test_mask = test_mask

# GCN Model
class GCN(torch.nn.Module):
    def __init__(self, input_dim, hidden_dim, num_classes):
        super(GCN, self).__init__()
        self.conv1 = GCNConv(input_dim, hidden_dim)
        self.conv2 = GCNConv(hidden_dim, num_classes)

    def forward(self, data):
        x, edge_index = data.x, data.edge_index
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        return x

# Train
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = GCN(input_dim=num_nodes, hidden_dim=16, num_classes=2).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

g_data = g_data.to(device)

for epoch in range(100):
    model.train()
    optimizer.zero_grad()
    out = model(g_data)
    loss = F.cross_entropy(out[g_data.train_mask], g_data.y[g_data.train_mask])
    loss.backward()
    optimizer.step()

    if epoch % 10 == 0:
        pred = out.argmax(dim=1)
        acc = (pred[g_data.test_mask] == g_data.y[g_data.test_mask]).float().mean()
        print(f"Epoch {epoch} | Loss: {loss.item():.4f} | Test Acc: {acc:.4f}")

# Final prediction
model.eval()
final_out = model(g_data).argmax(dim=1)
for node, idx in node_idx_map.items():
    print(f"{node}: Predicted Fraud: {final_out[idx].item()}  | Label: {y[idx].item() if y[idx]>=0 else 'Unknown'}")